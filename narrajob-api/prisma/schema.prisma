// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int                  @id @default(autoincrement())
  name     String               @db.VarChar(255)
  email    String               @unique @db.VarChar(255)
  img      String?
  profile  String?              @db.Text
  // 1:N
  articles Article[]
  // N:N
  supports Support[]

  @@map("users")
}

model Article {
  id        Int              @id @default(autoincrement())
  title     String
  img       String
  createdAt DateTime         @default(now()) @db.Timestamp(0)
  updateAt  DateTime         @default(now()) @updatedAt @db.Timestamp(0)
  // N:N
  tags      TagsOnArticles[]
  // 1:N
  contents  Content[]
  // N:1
  author    User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  // N:1
  product   Product          @relation(fields: [productId], references: [id])
  productId Int

  @@map("articles")
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  // N:N
  tagsOnArticles TagsOnArticles[]

  @@map("tags")
}

model Content {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  img         String?
  // N:1
  article     Article @relation(fields: [articleId], references: [id])
  articleId   Int

  @@map("contents")
}

model Shop {
  id          Int       @id @default(autoincrement())
  name        String
  img         String
  url         String
  description String    @db.Text
  // 1:N
  products    Product[]

  @@map("shops")
}

model Product {
  id       Int                  @id @default(autoincrement())
  name     String
  // N:1
  shop     Shop                 @relation(fields: [shopId], references: [id])
  shopId   Int
  // 1:N
  articles Article[]
  // N:N
  supports Support[]

  @@map("products")
}

model TagsOnArticles {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int

  @@id([articleId, tagId])
  @@map("tag_article")
}

model Support {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@id([productId, userId])
  @@map("supports")
}
